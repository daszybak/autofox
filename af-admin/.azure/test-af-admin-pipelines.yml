# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main


variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '6d92ac4a-b7f1-4f33-8a26-e179f7be1014'
  imageRepository: 'afadmin'
  containerRegistry: 'autofox.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Prepare
    displayName: Prepare
    jobs:
      - job: Build
        displayName: Prepare
        pool:
          vmImage: $(vmImageName)
        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '16.x'
          displayName: 'Install Node.js'

        - script: |
            echo "Build number tag:" $(tag) >> version.txt
            echo "Current date(d/m/y)/time:" $(date +"%d-%m-%Y_%H:%M:%S") >> version.txt
            echo "Full git hash:"  $(Build.SourceVersion) >> version.txt
            short_hash=`git rev-parse --short=7 HEAD`
            echo "Short git hash:" $short_hash >> version.txt
          displayName: 'Creat version_txt'

        
  - stage: Docker_build_and_push
    displayName: Docker build and push
    jobs:
      - job: Build
        steps:
        - bash: |
           echo "Cloning into sources folder at: $(Build.SourcesDirectory)"
           git -c http.extraHeader="Authorization: Basic $TOKEN" clone --progress --single-branch https://iddqd-hr@dev.azure.com/iddqd-hr/Autofox/_git/af-shared $(Build.SourcesDirectory)/af-shared
          env:
            TOKEN: $(repos-pat)
          displayName: 'Clone af-shared'

        - script: |
            npm install --ignore-scripts
            npm link ./af-shared
            npm run build
            npm run lint
          displayName: 'Build and lint'  

        - task: Docker@2
          displayName: Build and push an image to container registry
          inputs:
            command: buildAndPush
            repository: $(imageRepository)
            dockerfile: $(dockerfilePath)
            containerRegistry: $(dockerRegistryServiceConnection)
            tags: |
              $(tag)

        - task: PublishPipelineArtifact@1
          inputs:
            artifactName: '.k8s'
            path: '.k8s'

  - stage: Deploy
    displayName: Deploy stage
#    dependsOn: Prepare
    jobs:
      - deployment: Deploy
        displayName: Deploy job
        pool:
          vmImage: $(vmImageName)
        environment: 'apinestjs' #customize with your environment
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifactName: '.k8s'
                    downloadPath: '$(System.ArtifactsDirectory)/.k8s'

                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    kubernetesServiceConnection: manual-aks
                    action: deploy
                    namespace: default
                    manifests: |
                      $(System.ArtifactsDirectory)/.k8s/deployment.yaml
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)
                - script: |
                   buildUrl="$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)" 
                   export WEBHOOK_URL="$(discord-webhook)"
                   short_hash=`git rev-parse --short=7 HEAD`
                   curl \
                   -H "Content-Type: application/json" \
                   -d "{ \"username\": \"From Pipeline: $(Build.DefinitionName)\", \"content\": \" \", \"embeds\": [ { \"title\":  \"New build completed: $(Build.QueuedBy) \", \"description\":  \" \", \"url\": \"$buildUrl\", \"fields\": [ { \"name\": \"web_url\", \"value\": \"https://admin.autofox.iddqd.hr/\", \"inline\": true }, { \"name\": \"Tag\", \"value\": \"$(tag)\", \"inline\": true }, { \"name\": \"Git hash\", \"value\": \"$short_hash\", \"inline\": true }, { \"name\": \"Status\", \"value\": \"$(Agent.JobStatus)\", \"inline\": true } ] } ]}" $WEBHOOK_URL          
                  condition: always()
                  displayName: 'Send message to Discord'